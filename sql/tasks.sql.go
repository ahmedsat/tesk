// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description)
VALUES (?, ?)
RETURNING id, title, description, done, creation_date, modification_date, deletion_date
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}

const deleteOldTasks = `-- name: DeleteOldTasks :exec
UPDATE tasks
SET deletion_date = CURRENT_TIMESTAMP
WHERE done = TRUE
  AND deletion_date IS NULL
  AND modification_date < datetime('now', '-30 days')
`

func (q *Queries) DeleteOldTasks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldTasks)
	return err
}

const deleteOlderTasks = `-- name: DeleteOlderTasks :exec
DELETE FROM tasks
WHERE deletion_date IS NOT NULL
  AND deletion_date < datetime('now', '-60 days')
`

func (q *Queries) DeleteOlderTasks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOlderTasks)
	return err
}

const deleteTask = `-- name: DeleteTask :one
UPDATE tasks
SET deletion_date = CURRENT_TIMESTAMP,
    done          = TRUE
WHERE id = ?
RETURNING id, title, description, done, creation_date, modification_date, deletion_date
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}

const getTask = `-- name: GetTask :one


SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE id = ?
  AND done = FALSE
  AND deletion_date IS NULL
LIMIT 1
`

// sqlc queries (queries/tasks.sql)
func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}

const listArchivedTasks = `-- name: ListArchivedTasks :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE deletion_date IS NOT NULL
ORDER BY deletion_date DESC
`

func (q *Queries) ListArchivedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listArchivedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoneTasks = `-- name: ListDoneTasks :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE done = TRUE
  AND deletion_date IS NULL
ORDER BY id
`

func (q *Queries) ListDoneTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listDoneTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE done = FALSE
  AND deletion_date IS NULL
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksPage = `-- name: ListTasksPage :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE done = FALSE
  AND deletion_date IS NULL
ORDER BY id
LIMIT ? OFFSET ?
`

type ListTasksPageParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListTasksPage(ctx context.Context, arg ListTasksPageParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTaskDone = `-- name: MarkTaskDone :one
UPDATE tasks
SET done = TRUE
WHERE id = ?
RETURNING id, title, description, done, creation_date, modification_date, deletion_date
`

func (q *Queries) MarkTaskDone(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, markTaskDone, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}

const restoreTask = `-- name: RestoreTask :one
UPDATE tasks
SET done = FALSE
WHERE id = ?
  AND deletion_date IS NULL
RETURNING id, title, description, done, creation_date, modification_date, deletion_date
`

func (q *Queries) RestoreTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, restoreTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}

const searchTasksByDescription = `-- name: SearchTasksByDescription :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE description LIKE '%' || ? || '%'
  AND deletion_date IS NULL
ORDER BY id
`

func (q *Queries) SearchTasksByDescription(ctx context.Context, dollar_1 sql.NullString) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByDescription, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTasksByTitle = `-- name: SearchTasksByTitle :many
SELECT id, title, description, done, creation_date, modification_date, deletion_date
FROM tasks
WHERE title LIKE '%' || ? || '%'
  AND deletion_date IS NULL
ORDER BY id
`

func (q *Queries) SearchTasksByTitle(ctx context.Context, dollar_1 sql.NullString) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasksByTitle, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.CreationDate,
			&i.ModificationDate,
			&i.DeletionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title       = ?,
    description = ?
WHERE id = ?
RETURNING id, title, description, done, creation_date, modification_date, deletion_date
`

type UpdateTaskParams struct {
	Title       string
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.Title, arg.Description, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.CreationDate,
		&i.ModificationDate,
		&i.DeletionDate,
	)
	return i, err
}
